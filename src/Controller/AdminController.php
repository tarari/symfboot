<?php

namespace App\Controller;

use App\Entity\User;
use App\Entity\Post;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use App\Form\UserEditType;

/**
 * Class AdminController
 * @package App\Controller
 * @IsGranted("ROLE_ADMIN")
 */
class AdminController extends AbstractController
{

    /**
     * @Route("/admin/post",name="app_admin_posts")
     */
    public function posts(){
        //list all posts in a table
        $posts=$this->getDoctrine()->getRepository(Post::class)->findAll();
        return $this->render('admin/posts.html.twig',[
            'posts'=>$posts
        ]);

    }
    /**
     * @Route("/admin/user",name="app_admin_users")
     */
    public function users(){
        //list all users in a table
        $users=$this->getDoctrine()->getRepository(User::class)->findAll();
        return $this->render('admin/users.html.twig',[
            'users'=>$users
        ]);
    }
    /**
     * @Route("/admin/user/{id}/edit",name="app_admin_user_edit")
     *
     */
    public function editUser(Request $request, User $user,  UserPasswordEncoderInterface $passwordEncoder){
        //form edit user
        $form=$this->createForm(UserEditType::class,$user);
        $user=$form->getData();
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            if ($form->getData()->getPlainPassword()){
                $password=$passwordEncoder->encodePassword($user, $user->getplainPassword());
                $user->setPassword($password);
            }
            //upload file
            $file = $user->getAvatar();
            if($file){
                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                // moves the file to the directory where brochures are stored
                $file->move(
                    $this->getParameter('pictures_directory'),
                    $fileName
                );
                //updates property to store picture
                $user->setAvatar($fileName);
            }
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($user);
            $entityManager->flush();

            // do anything else you need here, like send an email
            return $this->redirectToRoute('app_admin_users');
        }
        return $this->render('admin/user_edit.html.twig',[
            'form'=>$form->createView(),
            'user'=>$user
        ]);

        }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
